// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: contributions.sql

package db

import (
	"context"
	"database/sql"
)

const createContribution = `-- name: CreateContribution :one
INSERT INTO contributions (
  deposit_id, amount, currency, member_id, status_code
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, deposit_id, amount, currency, member_id, created_at, status_code
`

type CreateContributionParams struct {
	DepositID  sql.NullInt32  `json:"deposit_id"`
	Amount     int64          `json:"amount"`
	Currency   sql.NullString `json:"currency"`
	MemberID   int32          `json:"member_id"`
	StatusCode string         `json:"status_code"`
}

func (q *Queries) CreateContribution(ctx context.Context, arg CreateContributionParams) (Contribution, error) {
	row := q.db.QueryRowContext(ctx, createContribution,
		arg.DepositID,
		arg.Amount,
		arg.Currency,
		arg.MemberID,
		arg.StatusCode,
	)
	var i Contribution
	err := row.Scan(
		&i.ID,
		&i.DepositID,
		&i.Amount,
		&i.Currency,
		&i.MemberID,
		&i.CreatedAt,
		&i.StatusCode,
	)
	return i, err
}

const deleteContribution = `-- name: DeleteContribution :exec
DELETE FROM contributions
WHERE id = $1
`

func (q *Queries) DeleteContribution(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteContribution, id)
	return err
}

const getContribution = `-- name: GetContribution :one
SELECT id, deposit_id, amount, currency, member_id, created_at, status_code FROM contributions
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetContribution(ctx context.Context, id int32) (Contribution, error) {
	row := q.db.QueryRowContext(ctx, getContribution, id)
	var i Contribution
	err := row.Scan(
		&i.ID,
		&i.DepositID,
		&i.Amount,
		&i.Currency,
		&i.MemberID,
		&i.CreatedAt,
		&i.StatusCode,
	)
	return i, err
}

const listContributions = `-- name: ListContributions :many
SELECT id, deposit_id, amount, currency, member_id, created_at, status_code FROM contributions
ORDER BY created_at
`

func (q *Queries) ListContributions(ctx context.Context) ([]Contribution, error) {
	rows, err := q.db.QueryContext(ctx, listContributions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contribution{}
	for rows.Next() {
		var i Contribution
		if err := rows.Scan(
			&i.ID,
			&i.DepositID,
			&i.Amount,
			&i.Currency,
			&i.MemberID,
			&i.CreatedAt,
			&i.StatusCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContributionsByDeposit = `-- name: ListContributionsByDeposit :many
SELECT id, deposit_id, amount, currency, member_id, created_at, status_code FROM contributions
WHERE deposit_id = $1
ORDER BY created_at
`

func (q *Queries) ListContributionsByDeposit(ctx context.Context, depositID sql.NullInt32) ([]Contribution, error) {
	rows, err := q.db.QueryContext(ctx, listContributionsByDeposit, depositID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contribution{}
	for rows.Next() {
		var i Contribution
		if err := rows.Scan(
			&i.ID,
			&i.DepositID,
			&i.Amount,
			&i.Currency,
			&i.MemberID,
			&i.CreatedAt,
			&i.StatusCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContributionsByMember = `-- name: ListContributionsByMember :many
SELECT id, deposit_id, amount, currency, member_id, created_at, status_code FROM contributions
WHERE member_id = $1
ORDER BY created_at
`

func (q *Queries) ListContributionsByMember(ctx context.Context, memberID int32) ([]Contribution, error) {
	rows, err := q.db.QueryContext(ctx, listContributionsByMember, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contribution{}
	for rows.Next() {
		var i Contribution
		if err := rows.Scan(
			&i.ID,
			&i.DepositID,
			&i.Amount,
			&i.Currency,
			&i.MemberID,
			&i.CreatedAt,
			&i.StatusCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContributionsPaginated = `-- name: ListContributionsPaginated :many
SELECT id, deposit_id, amount, currency, member_id, created_at, status_code FROM contributions
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListContributionsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContributionsPaginated(ctx context.Context, arg ListContributionsPaginatedParams) ([]Contribution, error) {
	rows, err := q.db.QueryContext(ctx, listContributionsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contribution{}
	for rows.Next() {
		var i Contribution
		if err := rows.Scan(
			&i.ID,
			&i.DepositID,
			&i.Amount,
			&i.Currency,
			&i.MemberID,
			&i.CreatedAt,
			&i.StatusCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContribution = `-- name: UpdateContribution :one
UPDATE contributions 
SET deposit_id = $2, amount = $3, currency = $4, member_id = $5, status_code = $6
WHERE id=$1
RETURNING id, deposit_id, amount, currency, member_id, created_at, status_code
`

type UpdateContributionParams struct {
	ID         int32          `json:"id"`
	DepositID  sql.NullInt32  `json:"deposit_id"`
	Amount     int64          `json:"amount"`
	Currency   sql.NullString `json:"currency"`
	MemberID   int32          `json:"member_id"`
	StatusCode string         `json:"status_code"`
}

func (q *Queries) UpdateContribution(ctx context.Context, arg UpdateContributionParams) (Contribution, error) {
	row := q.db.QueryRowContext(ctx, updateContribution,
		arg.ID,
		arg.DepositID,
		arg.Amount,
		arg.Currency,
		arg.MemberID,
		arg.StatusCode,
	)
	var i Contribution
	err := row.Scan(
		&i.ID,
		&i.DepositID,
		&i.Amount,
		&i.Currency,
		&i.MemberID,
		&i.CreatedAt,
		&i.StatusCode,
	)
	return i, err
}

const updateContributionStaus = `-- name: UpdateContributionStaus :one
UPDATE contributions 
SET status_code = $2
WHERE id=$1
RETURNING id, deposit_id, amount, currency, member_id, created_at, status_code
`

type UpdateContributionStausParams struct {
	ID         int32  `json:"id"`
	StatusCode string `json:"status_code"`
}

func (q *Queries) UpdateContributionStaus(ctx context.Context, arg UpdateContributionStausParams) (Contribution, error) {
	row := q.db.QueryRowContext(ctx, updateContributionStaus, arg.ID, arg.StatusCode)
	var i Contribution
	err := row.Scan(
		&i.ID,
		&i.DepositID,
		&i.Amount,
		&i.Currency,
		&i.MemberID,
		&i.CreatedAt,
		&i.StatusCode,
	)
	return i, err
}
